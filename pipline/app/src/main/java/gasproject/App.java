/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gasproject;

import gasproject.JSON.GasDTO;
import gasproject.elasticsearch.ElasticSearch;
import gasproject.redis.Redis;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class App {

    public static void main(String[] args) {

        //Redis 환경 설정
        String host = "172.30.1.15";
        int port = 10000;
        int timeout = 10000;
        String password = "root1";

        //  sample test
        //  해당 부분은 IoT 기기에서 데이터를 Redis에 직접 적재하는 상황을 나타냄
        /*  단일 데이터 테스트 */
//        GasDTO gasDTO = new GasDTO("A","70-85-C2-51-14-C7",0,44378.17459,0);
//        System.out.println("Test DTO: "+gasDTO.toString());
//
//        // 단일 데이터 Set
//        Redis redis = new Redis(host, port, timeout, password);
//        redis.setMessage("test",gasDTO.toString());
//        redis.closeRedis();
//
//        // 단일 데이터 Get
//        redis = new Redis(host, port, timeout, password);
//        String result = redis.getMessage("test");
//        redis.closeRedis();
//
//        System.out.println("Get Data: "+result);


        /*  다수 데이터 테스트 */
        // 다수 데이터 생성
        Redis redis;
        ElasticSearch elasticSearch;
        Random random = new Random();
        random.setSeed(System.currentTimeMillis());

        // 가중치 랜덤 값 가져오기
        Map<Integer, Double> w = new HashMap<Integer, Double>();
        w.put(0, 99D);
        w.put(1, 1D);

        ArrayList<GasDTO> gasDTOArrayList = new ArrayList<>();
        String[] IoTIDarray = {
                "70-85-C2-51-14-C0",
                "70-85-C2-51-14-C1",
                "70-85-C2-51-14-C2",
                "70-85-C2-51-14-C3",
                "70-85-C2-51-14-C4",
        };
        int[] IoTTypeDarray = {0,0,0,0,1};
        for(int i=0;i<5;i++){
            GasDTO _gasDTO = new GasDTO("A", IoTIDarray[i], IoTTypeDarray[i],44378.17459,getWeightedRandom(w,random));
            gasDTOArrayList.add(_gasDTO);
        }

        //다수 데이터 Set
        redis = new Redis(host, port, timeout, password);
        redis.pipelineSet(gasDTOArrayList); //파이프라인 사용하여 적재
        redis.closeRedis();

        /* ElasticSearch 적재 */
        //다수 데이터 Get


        for(int i = 0 ;i<gasDTOArrayList.size() ;i++){
            redis = new Redis(host, port, timeout, password);
            elasticSearch = new ElasticSearch();

            //String to JSON
            JSONObject jsonObject = new JSONObject(redis.getMessage(Integer.toString(i)));

            System.out.println(i+" franchiseeID : "+(String)jsonObject.get("franchiseeID"));
            System.out.println(i+" IoTID : "+(String)jsonObject.get("IoTID"));
            System.out.println(i+" IoTType : "+(int)jsonObject.get("IoTType"));
            System.out.println(i+" date : "+ jsonObject.getBigDecimal("date").doubleValue());
            System.out.println(i+" IoTState : "+(int)jsonObject.get("IoTState"));

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            //get Date From JSON
            elasticSearch.create("test","info",
                    (String)jsonObject.get("franchiseeID"),
                    (String)jsonObject.get("IoTID"),
                    (int)jsonObject.get("IoTType"),
                    jsonObject.getBigDecimal("date").doubleValue(),
                    (int)jsonObject.get("IoTState"));


            elasticSearch.closeRest();
            redis.closeRedis();
        }


    }
    public static <E> E getWeightedRandom(Map<E, Double> weights, Random random) {
        E result = null;
        double bestValue = Double.MAX_VALUE;

        for (E element : weights.keySet()) {
            double value = -Math.log(random.nextDouble()) / weights.get(element);
            if (value < bestValue) {
                bestValue = value;
                result = element;
            }
        }
        return result;
    }

}
